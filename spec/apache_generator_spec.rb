require 'vhost_generator/apache_generator'

describe VhostGenerator::ApacheGenerator do
  let(:config) { double('vhost config').as_null_object }
  subject do
    described_class.new(config, 'upstream' => 'myupstream')
  end

  describe "#render" do
    let(:output) { subject.render }

    it "includes the cmdline in a comment" do
      config.stub(:cmdline).and_return('CMDLINE')
      expect(output).to match(/^#### FILE GENERATED BY .*CMDLINE/)
    end

    context "when multiple upstreams" do
      before { config.stub(:instance_ports).and_return([1337, 1338]) }

      it "declares the named upstream" do
        expect(output).to match(%r{<Proxy balancer://myupstream>})
      end

      it "declares all the requested upstream servers" do
        expect(output).to include('BalancerMember http://localhost:1337')
        expect(output).to include('BalancerMember http://localhost:1338')
      end

      it "proxies to the named upstream" do
        expect(output).to include(
          'RewriteRule ^/(.*)$ balancer://myupstream%{REQUEST_URI} [P,QSA,L]')
      end
    end

    context "when single upstream" do
      before { config.stub(:instance_ports).and_return([1337]) }

      it "declares no upstream section" do
        expect(output).not_to match(%r{<Proxy balancer://\w+>})
      end

      it "does not declare any upstream servers" do
        expect(output).not_to include('BalancerMember http://localhost:1337')
      end

      it "proxies the single upstream directly" do
        expect(output).to include(
          'RewriteRule ^/(.*)$ http://localhost:1337%{REQUEST_URI} [P,QSA,L]')
      end
    end

    it "listens to the requested server ports" do
      config.stub(:server_ports).and_return([12345, 12346])
      expect(output).to include('<VirtualHost *:12345 *:12346>')
    end

    it "declares the server names it responds to" do
      config.stub(:server_names).and_return(%w(host1 host2 host3))
      expect(output).to include('ServerName host1')
      expect(output).to include('ServerAlias host2 host3')
    end

    it "declares the requested document root" do
      config.stub(:static_folder).and_return('STATIC-FOLDER')
      expect(output).to include('DocumentRoot STATIC-FOLDER')
    end

    it "respects custom relative_roots" do
      config.stub(:relative_root).and_return('RELATIVE_ROOT')
      expect(output).to include('<Location RELATIVE_ROOTassets>')
    end
  end
end
